<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="
           http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop 	 http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx.xsd
       "
	default-lazy-init="false">


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://192.168.0.10:3306/db1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false"/>
		<property name="username" value="root" />
		<property name="password" value="123456" />
	</bean>

	<!--&lt;!&ndash; constructor &ndash;&gt;-->
	<!--<bean id="xmlBeanConstruct" class="com.demo.bean.common.xml.construct.XmlBeanConstruct" lazy-init="true">-->
		<!--<constructor-arg value="8"></constructor-arg>-->
		<!--<constructor-arg value="dudu"></constructor-arg>-->
		<!--<constructor-arg ref="apple"></constructor-arg>-->
	<!--</bean>-->
	<!--&lt;!&ndash; constructor &ndash;&gt;-->


	<!--&lt;!&ndash; depsOn &ndash;&gt;-->
	<!--<bean class="com.demo.bean.common.xml.depsOn.XmlBeanDepOn" depends-on="toDepBean" lazy-init="true"/>-->
	<!--<bean id="toDepBean" class="com.demo.bean.common.xml.depsOn.XmlBeanToDep" lazy-init="true" />-->
	<!--&lt;!&ndash; depsOn &ndash;&gt;-->



	<!--&lt;!&ndash; autowire &ndash;&gt;-->
	<!--<bean id="xmlBeanPropAutowire" class="com.demo.bean.common.xml.property.autowire.XmlBeanPropAutowire" autowire="byName" lazy-init="true" >-->
		<!--<property name="properties">-->
			<!--<props>-->
				<!--<prop key="name">SoleRay</prop>-->
				<!--<prop key="gender">male</prop>-->
			<!--</props>-->
		<!--</property>-->
		<!--<property name="strList">-->
			<!--<list>-->
				<!--<value>tom</value>-->
				<!--<value>mike</value>-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="age" value="5"></property>-->
	<!--</bean>-->
	<!--&lt;!&ndash; autowire &ndash;&gt;-->


	<!--<bean class="com.demo.bean.common.xml.init.XmlBeanInitAutowire"-->
		  <!--init-method="initMethod"-->
		  <!--destroy-method="destroyMethod"-->
		  <!--lazy-init="true"/>-->

	<!--&lt;!&ndash; parent &ndash;&gt;-->
	<!--<bean id="beanP" class="com.demo.bean.common.xml.parent.XmlBeanParent" lazy-init="true" >-->
		<!--<property name="gender" value="1"/>-->
	<!--</bean>-->

	<!--<bean id="beanC" class="com.demo.bean.common.xml.parent.XmlBeanChild" parent="beanP" lazy-init="true">-->
		<!--<property name="name" value="box"/>-->
	<!--</bean>-->
	<!--&lt;!&ndash; parent &ndash;&gt;-->


	<!--&lt;!&ndash; lookup &ndash;&gt;-->
	<!--<bean class="com.demo.bean.common.xml.property.lookup.XmlBeanLookup" lazy-init="true">-->
		<!--<lookup-method name="getBeanPlainBean" />-->
	<!--</bean>-->
	<!--&lt;!&ndash; lookup &ndash;&gt;-->


	<!--&lt;!&ndash; replace &ndash;&gt;-->
	<!--<bean class="com.demo.bean.common.xml.property.replace.XmlBeanReplace" lazy-init="true" >-->
		<!--<replaced-method name="compute" replacer="cmr" />-->
	<!--</bean>-->

	<!--<bean id="cmr" class="com.demo.bean.common.xml.property.replace.XmlComputeMethodReplacer" lazy-init="true" />-->
	<!--&lt;!&ndash; replace &ndash;&gt;-->

	<!--<bean id="beforeAdvice" class="com.demo.aop.before.MyBeforeAdvice"></bean>-->
	<!--<bean id="AroundAdvice" class="com.demo.aop.around.MyAroundAdvice"></bean>-->

	<!--<aop:config>-->
		<!--<aop:pointcut id="pt" expression="execution(public * com.demo..*(..))"/>-->
		<!--&lt;!&ndash;<aop:advisor advice-ref="beforeAdvice" pointcut-ref="pt" />&ndash;&gt;-->
		<!--&lt;!&ndash;<aop:advisor advice-ref="AroundAdvice" pointcut-ref="pt" />&ndash;&gt;-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>-->
	<!--</aop:config>-->


	<!-- 配置了包含advice方法的Bean -->
	<!--<bean id="aspectAdviceBean" class="com.demo.aop.aspect.AspectAdviceBean" />-->

	<!--<aop:config proxy-target-class="true">-->
		<!--<aop:pointcut id="all" expression="execution(* com.demo..*(..))" />-->
		<!--<aop:pointcut id="services" expression="execution(* com.demo.service.demo..add*(..))" />-->
		<!--&lt;!&ndash;<aop:pointcut id="doMethods" expression="execution(* com.demo.service.demo..do*(..))" />&ndash;&gt;-->
		<!--<aop:aspect id="a1" ref="aspectAdviceBean" order="1">-->
			<!--<aop:before method="before1" pointcut-ref="all" />-->
			<!--<aop:before method="before2" pointcut-ref="services"/>-->
			<!--&lt;!&ndash;<aop:before method="before3" pointcut="execution(* com.demo.service.demo..add*(..)) and args(tk)" />&ndash;&gt;-->
			<!--&lt;!&ndash;<aop:before method="before4" pointcut="execution(* com.demo.service.demo..add*(..)) and args(tk,ti)"/>&ndash;&gt;-->
			<!--&lt;!&ndash;<aop:around method="arround1" pointcut-ref="services"/>&ndash;&gt;-->
			<!--&lt;!&ndash;<aop:around method="arround2" pointcut="execution(* com.demo.service.demo..add*(..)) and args(name)"/>&ndash;&gt;-->
			<!--&lt;!&ndash;<aop:after-returning method="afterReturning" pointcut-ref="services" returning="retValue"/>&ndash;&gt;-->
			<!--&lt;!&ndash;<aop:after-throwing method="afterThrowing" pointcut-ref="services" throwing="e"/>&ndash;&gt;-->
			<!--&lt;!&ndash;<aop:after method="after" pointcut-ref="services"/>&ndash;&gt;-->
		<!--</aop:aspect>-->
	<!--</aop:config>-->

	<!--<aop:aspectj-autoproxy/>-->



	<!--<tx:advice id="txAdvice" transaction-manager="txManager">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="add*"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>



	<!--<tx:annotation-driven transaction-manager="txManager"/>-->

	<!-- Spring的配置文件不扫描Controller -->
	<context:component-scan base-package="com.demo">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>




</beans>